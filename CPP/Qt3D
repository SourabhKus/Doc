#include <QGuiApplication>
#include <Qt3DCore/Qt3DCore>
#include <Qt3DRender/Qt3DRender>
#include <Qt3DExtras/QPhongMaterial>
#include <Qt3DExtras/QDiffuseSpecularMapMaterial>

#include <Qt3DExtras/Qt3DWindow>
#include <Qt3DExtras/QOrbitCameraController>
#include <Qt3DExtras/QTorusMesh>
#include <Qt3DExtras/QForwardRenderer>
#include <QVector3D>

Qt3DCore::QEntity *createScene()
{
    // Root entity
    Qt3DCore::QEntity *rootEntity = new Qt3DCore::QEntity;

    // Material
    Qt3DRender::QMaterial *material = new Qt3DExtras::QPhongMaterial(rootEntity);

    Qt3DCore::QTransform *transform = new Qt3DCore::QTransform;
    transform->setScale3D(QVector3D(1, 1, 1));
    //transform->setRotation(QQuaternion::fromAxisAndAngle(QVector3D(1, 0, 0), 45.0f));

    // Chest Entity
    Qt3DCore::QEntity *entity = new Qt3DCore::QEntity(rootEntity);
    Qt3DRender::QMesh *mesh = new Qt3DRender::QMesh(rootEntity);
    mesh->setSource(QUrl::fromLocalFile("C:/Users/sourabh/Downloads/Human_Head.obj"));

    entity->addComponent(mesh);
    entity->addComponent(transform);
    entity->addComponent(material);

    QVector3D pos(0, 0, 20);
    QVector3D  dir(0, 0, -20);
    float intensity = 1;

    Qt3DCore::QEntity *lightEntity = new Qt3DCore::QEntity(rootEntity);
    Qt3DRender::QDirectionalLight *light = new Qt3DRender::QDirectionalLight(rootEntity);
    light->setColor("white");
    light->setIntensity(intensity);
    light->setWorldDirection(dir);
    Qt3DCore::QTransform *lightTransform = new Qt3DCore::QTransform(rootEntity);
    lightTransform->setTranslation(pos);
    lightEntity->addComponent(light);
    lightEntity->addComponent(lightTransform);

    return rootEntity;
}

int main(int argc, char* argv[])
{
    QGuiApplication app(argc, argv);
    Qt3DExtras::Qt3DWindow view;

    Qt3DCore::QEntity *scene = createScene();

    // Camera
    Qt3DRender::QCamera *camera = view.camera();
    camera->lens()->setPerspectiveProjection(45.0f, 16.0f/9.0f, 0.1f, 1000.0f);
    camera->setPosition(QVector3D(0, 0, 1));
    camera->setViewCenter(QVector3D(0, 0, 0));

    // For camera controls
    Qt3DExtras::QOrbitCameraController *camController = new Qt3DExtras::QOrbitCameraController(scene);
    camController->setLinearSpeed( 10.0f );
    camController->setLookSpeed( 180.0f );
    camController->setCamera(camera);

    view.defaultFrameGraph()->setClearColor(QColor(QRgb(0x4d4d9f)));
    view.setRootEntity(scene);
    view.show();

    return app.exec();
}
